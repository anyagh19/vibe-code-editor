// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id String @id @default(cuid()) @map("_id")
  name String?
  email String @unique
  image String?
  accounts Account[]
  role UserRole @default(USER)

  myPlaygrounds Playground[]
  staredPlaygrounds Starmark[]


  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int? @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Template {
  REACT
  NEXTJS
  VUE
  ANGULAR
  HONO
  EXPRESS
}

model Playground {
  id String @id @default(cuid()) @map("_id")
  title String
  description String?
  template Template @default(REACT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  starmark Starmark[]
  templateFiles TemplateFile[]
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Starmark {
  id String @id @default(cuid()) @map("_id")
  playgroundId String
  userId String

  isMarked Boolean
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId , playgroundId])
}

model TemplateFile{
  id String @id @default(cuid()) @map("_id")
  content Json
  
  playgroundId String @unique
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
